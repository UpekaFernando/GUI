using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace shopManagementsytem2
{
    /// <summary>
    /// Interaction logic for UserDashboard.xaml
    /// </summary>
    public partial class UserDashboard : Window
    {
        public UserDashboard()
        {
            InitializeComponent();
            
            // Set up UI elements with proper error handling
            SetupDashboard();
            
            // Load data with proper error handling
            LoadData();
        }
        
        private void SetupDashboard()
        {
            try
            {
                // Set background image with multiple fallbacks
                // Try to load from local file first, then web
                var localImage = ImageHelper.LoadImageFromLocalFile("dashboard.jpg");
                if (localImage != null)
                {
                    MainGrid.Background = localImage;
                    System.Diagnostics.Debug.WriteLine("UserDashboard: Successfully loaded dashboard.jpg from local file");
                }
                else
                {
                    // If local file didn't work, try web URL
                    MainGrid.Background = ImageHelper.GetBackgroundImage(isLoginScreen: false);
                    System.Diagnostics.Debug.WriteLine("UserDashboard: Successfully loaded background from web URL");
                }
                
                // Set the profile image
                UserAvatarBorder.Background = ImageHelper.GetProfileImage();
                System.Diagnostics.Debug.WriteLine("UserDashboard: Successfully loaded profile image");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"UserDashboard image error: {ex.Message}");
                
                // Set fallback colors
                MainGrid.Background = new SolidColorBrush(Colors.LightSteelBlue);
                UserAvatarBorder.Background = new SolidColorBrush(Colors.DodgerBlue);
            }
        }
        
        private void LoadData()
        {
            try
            {
                LoadNearbyShops();
                LoadAllShops();
                LoadOrderHistory();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"UserDashboard data loading error: {ex.Message}");
                MessageBox.Show($"Error loading data: {ex.Message}", "Data Error", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private void LoadNearbyShops()
        {
            try
            {
                using (var context = new MenuDb())
                {
                    var shops = context.Shopkeepers.Select(s => s.ShopName).Distinct().ToList();
                    listBoxNearbyShops.ItemsSource = shops;
                    System.Diagnostics.Debug.WriteLine($"Loaded {shops.Count} nearby shops");
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error loading nearby shops: {ex.Message}");
                throw;
            }
        }

        private void LoadAllShops()
        {
            try
            {
                using (var context = new MenuDb())
                {
                    var shops = context.Shopkeepers.Select(s => s.ShopName).Distinct().ToList();
                    listBoxAllShops.ItemsSource = shops;
                    System.Diagnostics.Debug.WriteLine($"Loaded {shops.Count} shops");
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error loading all shops: {ex.Message}");
                throw;
            }
        }

        private void LoadOrderHistory()
        {
            try
            {
                using (var context = new MenuDb())
                {
                    var orders = context.Orders.ToList();
                    listBoxOrderHistory.ItemsSource = orders.Select(o => $"{o.OrderDate}: {o.MenuName} from {o.ShopName}").ToList();
                    System.Diagnostics.Debug.WriteLine($"Loaded {orders.Count} order history items");
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error loading order history: {ex.Message}");
                throw;
            }
        }

        private void ListBoxNearbyShops_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (listBoxNearbyShops.SelectedItem != null)
            {
                try
                {
                    string selectedShop = listBoxNearbyShops.SelectedItem.ToString();
                    ViewMenu viewMenuWindow = new ViewMenu(selectedShop);
                    viewMenuWindow.Show();
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine($"Error opening view menu: {ex.Message}");
                    MessageBox.Show($"Error opening menu: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void ListBoxAllShops_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (listBoxAllShops.SelectedItem != null)
            {
                try
                {
                    string selectedShop = listBoxAllShops.SelectedItem.ToString();
                    ViewMenu viewMenuWindow = new ViewMenu(selectedShop);
                    viewMenuWindow.Show();
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine($"Error opening view menu: {ex.Message}");
                    MessageBox.Show($"Error opening menu: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void ClearOrderHistory_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                using (var context = new MenuDb())
                {
                    context.Orders.RemoveRange(context.Orders);
                    context.SaveChanges();
                }
                listBoxOrderHistory.ItemsSource = null;
                MessageBox.Show("Order history cleared successfully.", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error clearing order history: {ex.Message}");
                MessageBox.Show($"Error clearing order history: {ex.Message}", "Database Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TopUpButton_Click(object sender, RoutedEventArgs e)
        {
            // Handle top-up balance button click
            MessageBox.Show("Top-up balance functionality to be implemented.", "Coming Soon", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void TextBox_GotFocus(object sender, RoutedEventArgs e)
        {
            TextBox textBox = sender as TextBox;
            if (textBox != null && textBox.Text == "Search for a shop or product...")
            {
                textBox.Text = string.Empty;
                textBox.Foreground = new SolidColorBrush(Colors.Black);
            }
        }
        
        private void TextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            TextBox textBox = sender as TextBox;
            if (textBox != null && string.IsNullOrWhiteSpace(textBox.Text))
            {
                textBox.Text = "Search for a shop or product...";
                textBox.Foreground = new SolidColorBrush(Colors.Gray);
            }
        }
        
        private void listBoxOrderHistory_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // You can implement order details view here if needed
        }
        
        private void LogoutButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                MainWindow mainWindow = new MainWindow();
                mainWindow.Show();
                this.Close();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error during logout: {ex.Message}");
                MessageBox.Show($"Error during logout: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }
}
